<?xml version="1.0"?>
<!--
   This is an adapted version of sr_edc_launch/sr_edc.launch

   The file launches our C6 Motorhand connected to c2
   and assumes tams_pr2_bringup's trixi.launch is already running.

   It has to be started on c2.

   Additionally it starts the FollowJointTrajectory server to connect to MoveIt.

   To avoid conflicts with the rest of trixi we start everything in the namespace "hand".

   - v4hn@20170822
-->
<launch>
<group ns="hand">
  <!-- Allows to specify the ethernet interface/s to be used. It defaults to the value of the env var ETHERCAT_PORT
       More than one interface can be specified by concatenating them using underscore as a separator (e.g eth1_eth2_eth3) -->
  <arg name="eth_port" default="$(optenv ETHERCAT_PORT eth0)"/>
  <!-- Set to true for debugging -->
  <arg name="debug" default="false"/>
  <!-- Set to 0 if we don't want to run calibration controllers (e.g. for the muscle hand) -->
  <arg name="calibration_controllers" default="1"/>
  <!-- Xacro file containing the robot description we want to load -->
  <arg name="robot_description" default="$(find tams_motorhand_description)/robots/tams_trixi_motorhand.urdf.xacro"/>
  <!-- The control mode PWM (true) or torque (false) -->
  <arg name="pwm_control" default="$(optenv PWM_CONTROL 1)"/>
  <!-- use ns or not -->
  <arg name="use_ns" default="true" />
  <!-- The ethercat serial number for the hand -->
  <arg name="hand_serial" default="23"/>
  <!-- The id for the right hand. It needs to be the same (but without trailing underscore) as the prefix used in the hand model. -->
  <arg name="hand_id" default="rh"/>
  <!-- the path to the mapping files -->
  <arg name="mapping_path" default="$(find sr_edc_launch)/mappings/default_mappings/rh_E_v1.yaml"/>

  <!-- Loads the robot description from the file passed as an argument -->
  <param name="robot_description" command="$(find xacro)/xacro.py '$(arg robot_description)' prefix:=$(arg hand_id)_"/>

  <param name="/hand/mapping/$(arg hand_serial)" value="$(arg hand_id)"/>
  <param name="/hand/joint_prefix/$(arg hand_serial)" value="$(arg hand_id)_"/>
   
  <!-- Load parameters for the hand -->
  <include file="$(find sr_edc_launch)/load_hand_parameters.xml">
    <arg name="hand_id" value="$(arg hand_id)"/>
    <arg name="pwm_control" value="$(arg pwm_control)"/>
    <arg name="use_ns" value="$(arg use_ns)" />
    <arg name="mapping_path" value="$(arg mapping_path)"/>
  </include>

  <include file="$(find sr_edc_launch)/sr_edc.machine"/>

  <!-- publishes joint 0s joint states on separate topic for debug/tuning -->
  <node pkg="sr_utilities" name="joint_0_pub" type="joint_0_publisher.py"/>

  <!-- ros_ethercat -->
  <group if="$(arg debug)">
    <node name="realtime_loop" machine="local" pkg="ros_ethercat_loop" type="ros_ethercat_loop"
          args="-i $(arg eth_port) -r robot_description" output="screen"
          launch-prefix="gdb -ex run -args"><!-- launch-prefix="xterm -hold -e strace -f -e trace=!gettimeofday,futex"/> -->
      <param if="$(arg pwm_control)" name="$(arg hand_id)/default_control_mode" value="PWM"/>
      <param unless="$(arg pwm_control)" name="$(arg hand_id)/default_control_mode" value="FORCE"/>
      <param name="use_ns" value="$(arg use_ns)"/>
      <param name="image_path" value="$(find sr_movements)/movements/test.png"/>
    </node>
  </group>
  <group unless="$(arg debug)">
    <node name="realtime_loop" machine="local" pkg="ros_ethercat_loop" type="ros_ethercat_loop"
          args="-i $(arg eth_port) -r robot_description" output="screen" launch-prefix="ethercat_grant">
      <param if="$(arg pwm_control)" name="$(arg hand_id)/default_control_mode" value="PWM"/>
      <param unless="$(arg pwm_control)" name="$(arg hand_id)/default_control_mode" value="FORCE"/>
      <param name="use_ns" value="$(arg use_ns)"/>
      <param name="image_path" value="$(find sr_movements)/movements/test.png"/>
    </node>
  </group>

  <group if="$(arg calibration_controllers)">
    <node name="calibrate_sr_edc" pkg="sr_utilities" type="calibrate_hand_finder.py" output="screen"/>
  </group>

  <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch"/>

  <!-- adding tactile state publisher using the tf prefix as a namespace -->
  <include file="$(find sr_tactile_sensor_controller)/sr_tactile_sensor.launch">
    <arg name="hand_id" value="$(arg hand_id)" />
  </include>

  <node name="teach_mode_node" pkg="sr_robot_launch" type="teach_mode_node" output="screen"/>

  <node name="shadow_joint_forward" pkg="topic_tools" type="relay" args="joint_states /joint_states"/>

  <node name="$(arg hand_id)_trajectory_controller" pkg="sr_utilities" type="trajectory_controller_spawner.py" output="screen">
    <param name="hand_trajectory" value="true"/>
    <param name="wait_for" value="calibrated"/>
  </node>

  <node name="stop_mfj4_position_controller" pkg="tams_motorhand" type="stop_mfj4_controller.py"/>
</group>
</launch>
